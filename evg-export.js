console.log('üöÄ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ï–í–ì –°–ü–ë —Å 1 —è–Ω–≤–∞—Ä—è 2024');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

// –î–∞—Ç–∞ —Å 1 —è–Ω–≤–∞—Ä—è 2024 (timestamp)
const START_DATE = new Date('2024-01-01T00:00:00Z').getTime() / 1000;

async function exportData() {
    try {
        console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: —Å ${new Date(START_DATE * 1000).toLocaleDateString('ru-RU')}`);
        
        let page = 1;
        let totalFound = 0;
        let evgSpbCount = 0;
        
        while (true) {
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
            
            const url = `https://${AMO_DOMAIN}/api/v4/leads`;
            const params = {
                'with': 'custom_fields_values,contacts',
                'limit': 250,
                'page': page,
                'filter[created_at][from]': START_DATE
            };
            
            console.log(`   üîó URL: ${url}`);
            console.log(`   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, params);
            
            const response = await axios.get(url, {
                headers: {
                    'Authorization': `Bearer ${AMO_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                params: params,
                timeout: 15000
            });
            
            console.log(`   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            const deals = response.data._embedded?.leads || [];
            if (deals.length === 0) {
                console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
                break;
            }
            
            totalFound += deals.length;
            console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫ (–≤—Å–µ–≥–æ: ${totalFound})`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ï–í–ì –°–ü–ë
            for (const deal of deals) {
                if (deal.custom_fields_values) {
                    const barField = deal.custom_fields_values.find(f => 
                        f.field_name === '–ë–∞—Ä (deal)'
                    );
                    
                    if (barField && barField.values && barField.values[0]) {
                        const barValue = barField.values[0].value;
                        
                        if (barValue && barValue.includes('–ï–í–ì –°–ü–ë')) {
                            evgSpbCount++;
                            console.log(`   ‚úÖ –ï–í–ì –°–ü–ë: ${deal.name} (ID: ${deal.id})`);
                            console.log(`      –ë–∞—Ä: ${barValue}`);
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
                            if (evgSpbCount === 1) {
                                console.log('   üìã –ü–æ–ª—è —Å–¥–µ–ª–∫–∏:');
                                deal.custom_fields_values.forEach(field => {
                                    if (field.values && field.values[0]) {
                                        console.log(`      ${field.field_name}: ${field.values[0].value}`);
                                    }
                                });
                            }
                        }
                    }
                }
            }
            
            page++;
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (page > 5) {
                console.log('‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                break;
            }
        }
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —Å ${new Date(START_DATE * 1000).toLocaleDateString('ru-RU')}: ${totalFound}`);
        console.log(`–°–¥–µ–ª–æ–∫ –ï–í–ì –°–ü–ë: ${evgSpbCount}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
        if (error.response) {
            console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
        }
    }
}

exportData();
