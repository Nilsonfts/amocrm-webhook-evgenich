const AmoCRMAPI = require('./amocrm-api');
const GoogleSheetsAPI = require('./google-sheets-api');
const { mapDealToRow } = require('./deal-mapper');

/**
 * DataSynchronizer - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É AmoCRM –∏ Google Sheets
 * 
 * üéØ –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò:
 * 1. –ü–æ–ª–µ "–ë–∞—Ä (deal)" = "–ï–í–ì –°–ü–ë"
 * 2. –í–°–ï –≠–¢–ê–ü–´ –≤–∫–ª—é—á–µ–Ω—ã (–∫–∞–∫ –≥–∞–ª–æ—á–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ AmoCRM)
 * 
 * –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç—Ç–∞–ø–æ–≤ —Å–º. –º–µ—Ç–æ–¥ isTargetDeal()
 */
class DataSynchronizer {
  constructor(amoCRM, googleSheets) {
    this.amoCRM = amoCRM;
    this.googleSheets = googleSheets;
    this.users = {};
    this.pipelines = {};
  }

  async initialize() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.loadReferenceData();
    
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  async loadReferenceData() {
    try {
      console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResponse = await this.amoCRM.getUsers();
      if (usersResponse._embedded && usersResponse._embedded.users) {
        usersResponse._embedded.users.forEach(user => {
          this.users[user.id] = user;
        });
        console.log(`üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(this.users).length}`);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ—Ä–æ–Ω–∫–∏
      const pipelinesResponse = await this.amoCRM.getPipelines();
      if (pipelinesResponse._embedded && pipelinesResponse._embedded.pipelines) {
        pipelinesResponse._embedded.pipelines.forEach(pipeline => {
          this.pipelines[pipeline.id] = pipeline;
        });
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫: ${Object.keys(this.pipelines).length}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  async processDeal(dealId, dealData = null) {
    try {
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${dealId}...`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
      let deal;
      if (dealData) {
        console.log(`üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook –¥–ª—è —Å–¥–µ–ª–∫–∏ ${dealId}`);
        deal = dealData;
      } else {
        console.log(`üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ${dealId} –∏–∑ AmoCRM API`);
        const dealResponse = await this.amoCRM.getDeal(dealId);
        deal = dealResponse;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—é "–ë–∞—Ä (deal)" = "–ï–í–ì –°–ü–ë" –∏ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã
      if (!this.isTargetDeal(deal)) {
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ isTargetDeal()
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const { contacts, companies } = await this.getRelatedData(deal);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏
      const rowData = mapDealToRow(deal, contacts, companies, this.users, this.pipelines);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
      const success = await this.googleSheets.addOrUpdateDeal(rowData);

      if (success) {
        console.log(`‚úÖ –°–¥–µ–ª–∫–∞ ${dealId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
        return true;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ ${dealId}`);
        return false;
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ ${dealId}:`, error.message);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É
  isTargetDeal(deal) {
    console.log(`üîç DEBUG isTargetDeal: —Å–¥–µ–ª–∫–∞ ${deal?.id}`);
    console.log(`üîç DEBUG deal object:`, JSON.stringify(deal, null, 2));
    
    // –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    if (process.env.DEBUG_SKIP_FILTER === 'true') {
      console.log(`üö® –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${deal.id} –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é "–ë–∞—Ä"`);
      return true;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—è "–ë–∞—Ä (deal)"
    let barFieldConfig;
    try {
      barFieldConfig = require('./bar-field-config.json');
    } catch (e) {
      console.log('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—è "–ë–∞—Ä (deal)" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.');
    }
    
    if (!deal.custom_fields_values) {
      console.log(`‚è≠Ô∏è –°–¥–µ–ª–∫–∞ ${deal.id}: –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π`);
      return false;
    }

    // –ò—â–µ–º –ø–æ–ª–µ "–ë–∞—Ä (deal)"
    const barField = deal.custom_fields_values.find(f => {
      if (barFieldConfig && f.field_id === barFieldConfig.barFieldId) {
        return true;
      }
      // Fallback –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      return f.field_name === '–ë–∞—Ä (deal)' || 
             f.field_name === '–ë–∞—Ä' ||
             (f.field_name && f.field_name.toLowerCase().includes('–±–∞—Ä'));
    });
    
    if (!barField || !barField.values || !barField.values[0]) {
      console.log(`‚è≠Ô∏è –°–¥–µ–ª–∫–∞ ${deal.id} "${deal.name}": –ø–æ–ª–µ "–ë–∞—Ä (deal)" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è - –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ ID
    const barValue = barField.values[0].value;
    const barEnumId = barField.values[0].enum_id;
    
    console.log(`üîç –°–¥–µ–ª–∫–∞ ${deal.id} "${deal.name}": ${barField.field_name} = "${barValue}" (enum_id: ${barEnumId})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –ò –ø–æ ID (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    const isEvgSpb = barValue === '–ï–í–ì –°–ü–ë' || 
                     (barFieldConfig && barEnumId === barFieldConfig.evgOptionId) ||
                     barEnumId === 1039939; // –ñ–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π ID –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    
    if (!isEvgSpb) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –∑–Ω–∞—á–µ–Ω–∏–µ "${barValue}" (ID: ${barEnumId}) ‚â† "–ï–í–ì –°–ü–ë"`);
      return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const pipelineInfo = this.pipelines[deal.pipeline_id];
    const pipelineName = pipelineInfo ? pipelineInfo.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞';
    
    let stageName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø';
    let stageInfo = null;
    if (pipelineInfo && pipelineInfo.statuses) {
      stageInfo = Object.values(pipelineInfo.statuses).find(s => s.id === deal.status_id);
      stageName = stageInfo ? stageInfo.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø';
    }

    // –ù–ê–°–¢–†–û–ô–ö–ê –≠–¢–ê–ü–û–í: –í–∫–ª—é—á–∞–µ–º –í–°–ï —ç—Ç–∞–ø—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å –≥–∞–ª–æ—á–∫–∞–º–∏)
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —ç—Ç–∞–ø—ã, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∏–∂–µ:
    
    /*
    // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–∫–∞–∫ –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ):
    const allowedStages = [
      '–ø–µ—Ä–≤–∏—á–∫–∞ (–≤—Å–µ)',       // ‚úì
      'What\'s App_TG',       // ‚úì
      'E-mail',               // ‚úì
      '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–æ—á–∫–æ–π –∑–≤–æ–Ω–æ–∫', // ‚úì
      '–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –û–± –∑–≤–æ–Ω–æ–∫',     // ‚úì
      '–ó–∞—è–≤–∫–∏ —Å–∞–π—Ç',          // ‚úì
      '–ó–∞—è–≤–∫–∏ VK',            // ‚úì
      '–ß–∞—Ç-–ë–æ—Ç',              // ‚úì
      '–ó–∞–¥–∞—á–∏ –æ—Ç —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞', // ‚úì
      '–ù–î–ó',                  // ‚úì
      '–ê–≤—Ç–æ—Ä–∞—Å—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',     // ‚úì
      '–í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É',       // ‚úì (–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
    ];
    
    if (!allowedStages.includes(stageName)) {
      console.log(`‚è≠Ô∏è –°–¥–µ–ª–∫–∞ ${deal.id}: —ç—Ç–∞–ø "${stageName}" –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö`);
      return false;
    }
    */

    console.log(`‚úÖ –°–¥–µ–ª–∫–∞ ${deal.id}: –ë–∞—Ä = "–ï–í–ì –°–ü–ë", –í–æ—Ä–æ–Ω–∫–∞ = "${pipelineName}", –≠—Ç–∞–ø = "${stageName}" - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú`);
    
    // –¢–ï–ö–£–©–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê: –í–°–ï –≠–¢–ê–ü–´ (–∫–∞–∫ –≥–∞–ª–æ—á–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ AmoCRM)
    // –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —ç—Ç–∞–ø—ã –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    console.log(`üéØ –§–ò–õ–¨–¢–†: –ï–í–ì –°–ü–ë + –í–°–ï –≠–¢–ê–ü–´ + –ó–ê –í–°–ï –í–†–ï–ú–Ø`);
    return true;
  }

  async getRelatedData(deal) {
    const contacts = [];
    const companies = [];

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
      if (deal._embedded && deal._embedded.contacts) {
        const contactIds = deal._embedded.contacts.map(c => c.id);
        if (contactIds.length > 0) {
          const contactsResponse = await this.amoCRM.getContacts(contactIds);
          if (contactsResponse._embedded && contactsResponse._embedded.contacts) {
            contacts.push(...contactsResponse._embedded.contacts);
          }
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
      if (deal._embedded && deal._embedded.companies) {
        const companyIds = deal._embedded.companies.map(c => c.id);
        if (companyIds.length > 0) {
          const companiesResponse = await this.amoCRM.getCompanies(companyIds);
          if (companiesResponse._embedded && companiesResponse._embedded.companies) {
            companies.push(...companiesResponse._embedded.companies);
          }
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }

    return { contacts, companies };
  }

  async fullSync() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∫–∏ —Å "–ë–∞—Ä (deal)" = "–ï–í–ì –°–ü–ë")...');
    const startTime = Date.now();
    let processed = 0;
    let filtered = 0;
    let errors = 0;
    let totalFound = 0;
    let evgDealsFound = 0;

    try {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.loadReferenceData();

      let page = 1;
      let hasMorePages = true;

      while (hasMorePages) {
        console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –í–°–ï —Å–¥–µ–ª–∫–∏ (–∏–∑ –≤—Å–µ—Ö –≤–æ—Ä–æ–Ω–æ–∫ –∏ –í–°–ï–• —ç—Ç–∞–ø–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ)
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ "–ë–∞—Ä (deal)" = "–ï–í–ì –°–ü–ë" –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ isTargetDeal()
        const dealsResponse = await this.amoCRM.getAllDeals(page, 250);
        
        if (!dealsResponse._embedded || !dealsResponse._embedded.leads) {
          console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
          break;
        }

        const deals = dealsResponse._embedded.leads;
        totalFound += deals.length;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${deals.length}, –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalFound}`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
        for (const deal of deals) {
          try {
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è "–ë–∞—Ä"
            if (deal.custom_fields_values) {
              const barFields = deal.custom_fields_values.filter(f => 
                f.field_name && f.field_name.toLowerCase().includes('–±–∞—Ä')
              );
              
              if (barFields.length > 0) {
                console.log(`üîç –°–¥–µ–ª–∫–∞ ${deal.id}: –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Å "–±–∞—Ä":`, 
                  barFields.map(f => `${f.field_name} = ${f.values?.[0]?.value || '–ø—É—Å—Ç–æ'}`).join(', '));
              }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä
            if (!this.isTargetDeal(deal)) {
              filtered++;
              continue;
            }

            evgDealsFound++;
            const { contacts, companies } = await this.getRelatedData(deal);
            const rowData = mapDealToRow(deal, contacts, companies, this.users, this.pipelines);
            
            const success = await this.googleSheets.addOrUpdateDeal(rowData);
            if (success) {
              processed++;
            } else {
              errors++;
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            if (processed % 10 === 0) {
              await new Promise(resolve => setTimeout(resolve, 100));
            }

          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ ${deal.id}:`, error.message);
            errors++;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const totalPages = Math.ceil((dealsResponse._page_count || 0) / 250);
        hasMorePages = page < totalPages;
        page++;

        console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page - 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ï–í–ì –°–ü–ë: ${evgDealsFound}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${filtered}, –æ—à–∏–±–æ–∫: ${errors}`);
      }

      const duration = Math.round((Date.now() - startTime) / 1000);
      console.log(`‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}—Å`);
      console.log(`üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
      console.log(`   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${totalFound}`);
      console.log(`   üéØ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –ï–í–ì –°–ü–ë: ${evgDealsFound}`);
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`);
      console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –ï–í–ì –°–ü–ë): ${filtered}`);
      console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors}`);

      return { processed, filtered, errors, duration, totalFound, evgDealsFound };

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
      return { processed, filtered, errors: errors + 1, duration: Math.round((Date.now() - startTime) / 1000), totalFound, evgDealsFound };
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–π –≤ AmoCRM
  async diagnoseFields() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –≤ AmoCRM...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
      const customFields = await this.amoCRM.getCustomFields();
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–æ–∫:');
      
      if (customFields._embedded && customFields._embedded.custom_fields) {
        customFields._embedded.custom_fields.forEach(field => {
          console.log(`   ID: ${field.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${field.name}", –¢–∏–ø: ${field.type}`);
          
          // –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å "–±–∞—Ä"
          if (field.name.toLowerCase().includes('–±–∞—Ä')) {
            console.log(`   ‚≠ê –ù–ê–ô–î–ï–ù–û –ü–û–õ–ï –° "–ë–ê–†": ID ${field.id}, –Ω–∞–∑–≤–∞–Ω–∏–µ "${field.name}"`);
            
            if (field.enums) {
              console.log(`   üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:`);
              field.enums.forEach(enumItem => {
                console.log(`      - "${enumItem.value}" (ID: ${enumItem.id})`);
              });
            }
          }
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 50 —Å–¥–µ–ª–æ–∫...');
      const dealsResponse = await this.amoCRM.getAllDeals(1, 50);
      
      if (dealsResponse._embedded && dealsResponse._embedded.leads) {
        let foundEvgDeals = 0;
        const barValues = new Set();
        
        dealsResponse._embedded.leads.forEach(deal => {
          if (deal.custom_fields_values) {
            // –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è —Å "–±–∞—Ä" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            const barFields = deal.custom_fields_values.filter(f => 
              f.field_name && f.field_name.toLowerCase().includes('–±–∞—Ä')
            );
            
            barFields.forEach(field => {
              if (field.values && field.values[0]) {
                barValues.add(`${field.field_name}: "${field.values[0].value}"`);
                
                if (field.values[0].value === '–ï–í–ì –°–ü–ë') {
                  foundEvgDeals++;
                  console.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê –°–î–ï–õ–ö–ê –ï–í–ì –°–ü–ë: ID ${deal.id}, –ø–æ–ª–µ "${field.field_name}" = "${field.values[0].value}"`);
                }
              }
            });
          }
        });
        
        console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:`);
        console.log(`   üéØ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –ï–í–ì –°–ü–ë –≤ –ø–µ—Ä–≤—ã—Ö 50: ${foundEvgDeals}`);
        console.log(`   üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π "–±–∞—Ä":`);
        barValues.forEach(value => console.log(`      - ${value}`));
      }
      
      return { success: true, message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏' };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = DataSynchronizer;
