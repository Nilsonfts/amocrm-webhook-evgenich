console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ AmoCRM');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

console.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${AMO_DOMAIN}`);
console.log(`üîë –¢–æ–∫–µ–Ω: ${AMO_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

async function testExport() {
    try {
        console.log('üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM...');
        
        const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
            headers: {
                'Authorization': `Bearer ${AMO_TOKEN}`,
                'Content-Type': 'application/json'
            },
            params: {
                'with': 'custom_fields_values',
                'limit': 5
            }
        });

        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${response.data._embedded.leads.length} —Å–¥–µ–ª–æ–∫`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
        const deals = response.data._embedded.leads;
        for (const deal of deals) {
            console.log(`üì¶ –°–¥–µ–ª–∫–∞ ${deal.id}: "${deal.name}"`);
            
            if (deal.custom_fields_values) {
                const barField = deal.custom_fields_values.find(f => 
                    f.field_name && f.field_name.includes('–ë–∞—Ä')
                );
                
                if (barField && barField.values && barField.values[0]) {
                    const value = barField.values[0].value;
                    console.log(`   üè™ –ë–∞—Ä: ${value}`);
                    
                    if (value && value.includes('–ï–í–ì –°–ü–ë')) {
                        console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù–ê –ï–í–ì –°–ü–ë –°–î–ï–õ–ö–ê!`);
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.status, error.response?.data || error.message);
    }
}

testExport();
