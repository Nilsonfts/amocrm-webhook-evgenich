console.log('üìã –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• AmoCRM');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

async function analyzeData() {
    try {
        console.log('üì° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ AmoCRM...\n');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫
        const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
            headers: {
                'Authorization': `Bearer ${AMO_TOKEN}`,
                'Content-Type': 'application/json'
            },
            params: {
                'with': 'custom_fields_values',
                'limit': 250,
                'page': 1
            }
        });
        
        const deals = response.data._embedded?.leads || [];
        console.log(`üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${deals.length}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è "–ë–∞—Ä (deal)"
        const barValues = new Map();
        let dealsWithBar = 0;
        let dealsWithoutBar = 0;
        
        for (const deal of deals) {
            let hasBar = false;
            
            if (deal.custom_fields_values) {
                const barField = deal.custom_fields_values.find(f => 
                    f.field_name === '–ë–∞—Ä (deal)'
                );
                
                if (barField && barField.values && barField.values[0]) {
                    const barValue = barField.values[0].value;
                    if (barValue) {
                        hasBar = true;
                        dealsWithBar++;
                        
                        const count = barValues.get(barValue) || 0;
                        barValues.set(barValue, count + 1);
                    }
                }
            }
            
            if (!hasBar) {
                dealsWithoutBar++;
            }
        }
        
        console.log(`üìä –°–¥–µ–ª–æ–∫ —Å –ø–æ–ª–µ–º "–ë–∞—Ä (deal)": ${dealsWithBar}`);
        console.log(`üìä –°–¥–µ–ª–æ–∫ –±–µ–∑ –ø–æ–ª—è "–ë–∞—Ä (deal)": ${dealsWithoutBar}`);
        
        console.log('\nüè™ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è "–ë–∞—Ä (deal)" (–∏–∑ –ø–µ—Ä–≤—ã—Ö 250 —Å–¥–µ–ª–æ–∫):');
        Array.from(barValues.entries())
            .sort((a, b) => b[1] - a[1]) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            .forEach(([value, count]) => {
                console.log(`   ${value} (${count} —Å–¥–µ–ª–æ–∫)`);
            });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "–ï–í–ì –°–ü–ë"
        const evgSpbFound = Array.from(barValues.keys()).find(value => 
            value.includes('–ï–í–ì') && value.includes('–°–ü–ë')
        );
        
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê "–ï–í–ì –°–ü–ë":');
        if (evgSpbFound) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: "${evgSpbFound}" (${barValues.get(evgSpbFound)} —Å–¥–µ–ª–æ–∫)`);
        } else {
            console.log('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ "–ï–í–ì –°–ü–ë" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ª–µ "–ë–∞—Ä (deal)"');
            
            // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            const evgValues = Array.from(barValues.keys()).filter(value => 
                value.includes('–ï–í–ì') || value.includes('–°–ü–ë')
            );
            
            if (evgValues.length > 0) {
                console.log('\nüîç –ü–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:');
                evgValues.forEach(value => {
                    console.log(`   "${value}" (${barValues.get(value)} —Å–¥–µ–ª–æ–∫)`);
                });
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –°–ü–ë –∑–Ω–∞—á–µ–Ω–∏—è
                const spbValues = Array.from(barValues.keys()).filter(value => 
                    value.includes('–°–ü–ë')
                );
                if (spbValues.length > 0) {
                    console.log('\nüîç –ó–Ω–∞—á–µ–Ω–∏—è —Å "–°–ü–ë":');
                    spbValues.forEach(value => {
                        console.log(`   "${value}" (${barValues.get(value)} —Å–¥–µ–ª–æ–∫)`);
                    });
                }
            }
        }
        
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞—Ä "–ï–í–ì –°–ü–ë" –≤ AmoCRM');
        console.log('2. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ä–∞');
        console.log('3. –ò–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –±–∞—Ä–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
        const topBars = Array.from(barValues.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 3);
            
        console.log('\nüìà –¢–û–ü-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∞—Ä–∞:');
        topBars.forEach(([value, count], index) => {
            console.log(`   ${index + 1}. "${value}" - ${count} —Å–¥–µ–ª–æ–∫`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

analyzeData();
