console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π —Å–¥–µ–ª–æ–∫');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

async function analyzeFields() {
    try {
        console.log('üì° –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–¥–µ–ª–æ–∫...');
        
        const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
            headers: {
                'Authorization': `Bearer ${AMO_TOKEN}`,
                'Content-Type': 'application/json'
            },
            params: {
                'with': 'custom_fields_values',
                'limit': 10
            }
        });
        
        const deals = response.data._embedded?.leads || [];
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        const allFields = new Set();
        
        for (let i = 0; i < Math.min(3, deals.length); i++) {
            const deal = deals[i];
            console.log(`\nüì¶ –°–¥–µ–ª–∫–∞ ${i + 1}: "${deal.name}" (ID: ${deal.id})`);
            
            if (deal.custom_fields_values) {
                console.log('   üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è:');
                deal.custom_fields_values.forEach(field => {
                    allFields.add(field.field_name);
                    if (field.values && field.values[0]) {
                        const value = field.values[0].value;
                        console.log(`      ${field.field_name}: ${value}`);
                        
                        // –ò—â–µ–º –ø–æ–ª—è —Å "–±–∞—Ä" –∏–ª–∏ "–µ–≤–≥"
                        if (field.field_name.toLowerCase().includes('–±–∞—Ä') || 
                            field.field_name.toLowerCase().includes('–µ–≤–≥') ||
                            (typeof value === 'string' && value.toLowerCase().includes('–µ–≤–≥'))) {
                            console.log(`      ‚≠ê –ù–ê–ô–î–ï–ù–û –†–ï–õ–ï–í–ê–ù–¢–ù–û–ï –ü–û–õ–ï!`);
                        }
                    }
                });
            } else {
                console.log('   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π');
            }
        }
        
        console.log('\nüìä –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
        Array.from(allFields).sort().forEach(field => {
            console.log(`   ‚Ä¢ ${field}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

analyzeFields();
