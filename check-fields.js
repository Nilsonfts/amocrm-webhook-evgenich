console.log('üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô AmoCRM');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

async function analyzeAmoFields() {
    try {
        console.log('üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ AmoCRM...');
        console.log(`üåê –î–æ–º–µ–Ω: ${AMO_DOMAIN}`);
        console.log(`üîë –¢–æ–∫–µ–Ω: ${AMO_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        console.log('\nüì¶ –ü–æ–ª—É—á–∞—é —Å–¥–µ–ª–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
            headers: {
                'Authorization': `Bearer ${AMO_TOKEN}`,
                'Content-Type': 'application/json'
            },
            params: {
                'with': 'custom_fields_values,contacts,companies',
                'limit': 10 // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 10 —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            }
        });
        
        const deals = response.data._embedded?.leads || [];
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
        
        if (deals.length === 0) {
            console.log('‚ùå –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–¥–µ–ª–æ–∫
        console.log('\nüìã –°–¢–†–£–ö–¢–£–†–ê –°–î–ï–õ–ö–ò (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è):');
        const firstDeal = deals[0];
        console.log(`–ü—Ä–∏–º–µ—Ä —Å–¥–µ–ª–∫–∏: "${firstDeal.name}" (ID: ${firstDeal.id})`);
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        const basicFields = {
            'ID': firstDeal.id,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': firstDeal.name,
            '–ë—é–¥–∂–µ—Ç': firstDeal.price || 0,
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(firstDeal.created_at * 1000).toLocaleString('ru-RU'),
            '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': new Date(firstDeal.updated_at * 1000).toLocaleString('ru-RU'),
            '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ID': firstDeal.responsible_user_id,
            '–í–æ—Ä–æ–Ω–∫–∞ ID': firstDeal.pipeline_id,
            '–≠—Ç–∞–ø ID': firstDeal.status_id,
        };
        
        console.log('\nüèóÔ∏è –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø:');
        Object.entries(basicFields).forEach(([key, value]) => {
            console.log(`   ${key}: ${value}`);
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
        console.log('\nüé® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–û–õ–Ø:');
        const allCustomFields = new Map();
        
        for (const deal of deals) {
            if (deal.custom_fields_values) {
                deal.custom_fields_values.forEach(field => {
                    if (!allCustomFields.has(field.field_name)) {
                        allCustomFields.set(field.field_name, {
                            field_id: field.field_id,
                            field_name: field.field_name,
                            field_code: field.field_code,
                            values: []
                        });
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                    if (field.values && field.values[0]) {
                        const existingField = allCustomFields.get(field.field_name);
                        const value = field.values[0].value;
                        if (existingField.values.length < 3 && !existingField.values.includes(value)) {
                            existingField.values.push(value);
                        }
                    }
                });
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
        const sortedFields = Array.from(allCustomFields.values()).sort((a, b) => 
            a.field_name.localeCompare(b.field_name)
        );
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${sortedFields.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π:\n`);
        
        sortedFields.forEach((field, index) => {
            console.log(`${(index + 1).toString().padStart(2, '0')}. "${field.field_name}"`);
            console.log(`    ID: ${field.field_id}`);
            if (field.field_code) {
                console.log(`    –ö–æ–¥: ${field.field_code}`);
            }
            if (field.values.length > 0) {
                console.log(`    –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π: ${field.values.join(', ')}`);
            }
            console.log('');
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        console.log('üë• –ö–û–ù–¢–ê–ö–¢–´:');
        let hasContacts = false;
        for (const deal of deals) {
            if (deal._embedded && deal._embedded.contacts) {
                hasContacts = true;
                const contact = deal._embedded.contacts[0];
                console.log(`   –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–∞: "${contact.name}" (ID: ${contact.id})`);
                if (contact.custom_fields_values) {
                    console.log('   –ü–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:');
                    contact.custom_fields_values.slice(0, 3).forEach(field => {
                        if (field.values && field.values[0]) {
                            console.log(`     ${field.field_name}: ${field.values[0].value}`);
                        }
                    });
                }
                break;
            }
        }
        if (!hasContacts) {
            console.log('   –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–¥–µ–ª–∫–∞—Ö');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö
        console.log('\nüîÄ –í–û–†–û–ù–ö–ò –ò –≠–¢–ê–ü–´:');
        try {
            const pipelinesResponse = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads/pipelines`, {
                headers: { 'Authorization': `Bearer ${AMO_TOKEN}` }
            });
            
            const pipelines = pipelinesResponse.data._embedded?.pipelines || [];
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${pipelines.length} –≤–æ—Ä–æ–Ω–æ–∫:`);
            
            pipelines.forEach((pipeline, index) => {
                console.log(`\n${index + 1}. –í–æ—Ä–æ–Ω–∫–∞: "${pipeline.name}" (ID: ${pipeline.id})`);
                if (pipeline._embedded && pipeline._embedded.statuses) {
                    console.log('   –≠—Ç–∞–ø—ã:');
                    pipeline._embedded.statuses.forEach(status => {
                        console.log(`     ‚Ä¢ ${status.name} (ID: ${status.id})`);
                    });
                }
            });
        } catch (error) {
            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö');
        }
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:');
        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å–¥–µ–ª–∫–∏: ~10`);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π: ${sortedFields.length}`);
        console.log(`‚úÖ –°–¥–µ–ª–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${deals.length}`);
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM: —É—Å–ø–µ—à–Ω–æ`);
        
        console.log('\nüí° –ì–û–¢–û–í –ö –ù–ê–°–¢–†–û–ô–ö–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò!');
        console.log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å, –ø–æ –∫–∞–∫–∏–º –ø–æ–ª—è–º –¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π:', error.message);
        if (error.response) {
            console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
        }
    }
}

analyzeAmoFields();
