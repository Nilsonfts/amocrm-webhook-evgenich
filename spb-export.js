console.log('üöÄ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –í–°–ï–• –°–ü–ë –±–∞—Ä–æ–≤ —Å 1 —è–Ω–≤–∞—Ä—è 2024');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

// –î–∞—Ç–∞ —Å 1 —è–Ω–≤–∞—Ä—è 2024 (timestamp)
const START_DATE = new Date('2024-01-01T00:00:00Z').getTime() / 1000;

async function exportSpbDeals() {
    try {
        console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: —Å ${new Date(START_DATE * 1000).toLocaleDateString('ru-RU')}`);
        console.log('üè™ –§–∏–ª—å—Ç—Ä –ø–æ –±–∞—Ä–∞–º: –†–í–ë –°–ü–ë –ì28, –†–í–ë –°–ü–ë –ü–ê–ü');
        
        let page = 1;
        let totalFound = 0;
        let spbCount = 0;
        let spbDeals = [];
        
        while (page <= 10) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
            
            const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
                headers: {
                    'Authorization': `Bearer ${AMO_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                params: {
                    'with': 'custom_fields_values,contacts',
                    'limit': 250,
                    'page': page,
                    'filter[created_at][from]': START_DATE
                },
                timeout: 15000
            });
            
            const deals = response.data._embedded?.leads || [];
            if (deals.length === 0) {
                console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
                break;
            }
            
            totalFound += deals.length;
            console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫ (–≤—Å–µ–≥–æ: ${totalFound})`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –°–ü–ë –±–∞—Ä–∞–º
            for (const deal of deals) {
                if (deal.custom_fields_values) {
                    const barField = deal.custom_fields_values.find(f => 
                        f.field_name === '–ë–∞—Ä (deal)'
                    );
                    
                    if (barField && barField.values && barField.values[0]) {
                        const barValue = barField.values[0].value;
                        
                        if (barValue && (barValue.includes('–†–í–ë –°–ü–ë –ì28') || barValue.includes('–†–í–ë –°–ü–ë –ü–ê–ü'))) {
                            spbCount++;
                            
                            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                            const dealData = {
                                id: deal.id,
                                name: deal.name,
                                bar: barValue,
                                budget: deal.price || 0,
                                created_date: new Date(deal.created_at * 1000).toLocaleString('ru-RU'),
                                responsible: deal.responsible_user_id,
                                pipeline: deal.pipeline_id,
                                stage: deal.status_id
                            };
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                            if (deal.custom_fields_values) {
                                deal.custom_fields_values.forEach(field => {
                                    if (field.values && field.values[0]) {
                                        switch(field.field_name) {
                                            case '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏':
                                                dealData.booking_date = field.values[0].value;
                                                break;
                                            case '–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π':
                                                dealData.guests = field.values[0].value;
                                                break;
                                            case '–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞':
                                                dealData.arrival_time = field.values[0].value;
                                                break;
                                            case '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë':
                                                dealData.comment = field.values[0].value;
                                                break;
                                        }
                                    }
                                });
                            }
                            
                            spbDeals.push(dealData);
                            console.log(`   ‚úÖ –°–ü–ë: ${deal.name} | ${barValue} | ${dealData.budget} ‚ÇΩ`);
                        }
                    }
                }
            }
            
            page++;
        }
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–ü–û–†–¢–ê:');
        console.log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ —Å ${new Date(START_DATE * 1000).toLocaleDateString('ru-RU')}: ${totalFound}`);
        console.log(`–°–¥–µ–ª–æ–∫ –°–ü–ë –±–∞—Ä–æ–≤: ${spbCount}`);
        
        if (spbDeals.length > 0) {
            console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –°–ü–ë –°–î–ï–õ–ö–ê–ú:');
            spbDeals.forEach((deal, index) => {
                console.log(`\n${index + 1}. ID: ${deal.id} | ${deal.name}`);
                console.log(`   üè™ –ë–∞—Ä: ${deal.bar}`);
                console.log(`   üí∞ –ë—é–¥–∂–µ—Ç: ${deal.budget} ‚ÇΩ`);
                console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–æ: ${deal.created_date}`);
                if (deal.booking_date) console.log(`   üìÜ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏: ${deal.booking_date}`);
                if (deal.guests) console.log(`   üë• –ì–æ—Å—Ç–µ–π: ${deal.guests}`);
                if (deal.arrival_time) console.log(`   ‚è∞ –í—Ä–µ–º—è: ${deal.arrival_time}`);
                if (deal.comment) console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${deal.comment.substring(0, 100)}${deal.comment.length > 100 ? '...' : ''}`);
            });
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞—Ä–∞–º
            const barStats = {};
            spbDeals.forEach(deal => {
                barStats[deal.bar] = (barStats[deal.bar] || 0) + 1;
            });
            
            console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–†–ê–ú:');
            Object.entries(barStats).forEach(([bar, count]) => {
                console.log(`   ${bar}: ${count} —Å–¥–µ–ª–æ–∫`);
            });
            
            // –û–±—â–∏–π –±—é–¥–∂–µ—Ç
            const totalBudget = spbDeals.reduce((sum, deal) => sum + deal.budget, 0);
            console.log(`\nüí∞ –û–ë–©–ò–ô –ë–Æ–î–ñ–ï–¢ –°–ü–ë: ${totalBudget.toLocaleString('ru-RU')} ‚ÇΩ`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
        if (error.response) {
            console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
        }
    }
}

exportSpbDeals();
