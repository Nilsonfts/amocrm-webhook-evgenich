const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');

require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const AMO_DOMAIN = process.env.AMO_DOMAIN || 'nebar.amocrm.ru';
const AMO_TOKEN = process.env.AMO_TOKEN;

console.log('üéØ –°–µ—Ä–≤–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ AmoCRM –∑–∞–ø—É—â–µ–Ω');
console.log(`   AMO_DOMAIN: ${AMO_DOMAIN}`);
console.log(`   AMO_TOKEN: ${AMO_TOKEN ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
app.get('/api/filter-options', async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...');
    
    const axios = require('axios');
    
    if (!AMO_TOKEN) {
      throw new Error('AMO_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–æ–Ω–∫–∏ –∏ —ç—Ç–∞–ø—ã
    const pipelinesResponse = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads/pipelines`, {
      headers: { 'Authorization': `Bearer ${AMO_TOKEN}` }
    });
    
    const pipelines = pipelinesResponse.data._embedded?.pipelines || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
    const dealsResponse = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
      headers: { 'Authorization': `Bearer ${AMO_TOKEN}` },
      params: { 'with': 'custom_fields_values', 'limit': 100 }
    });
    
    const deals = dealsResponse.data._embedded?.leads || [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    const fieldsMap = new Map();
    
    for (const deal of deals) {
      if (deal.custom_fields_values) {
        deal.custom_fields_values.forEach(field => {
          if (!fieldsMap.has(field.field_name)) {
            fieldsMap.set(field.field_name, {
              field_id: field.field_id,
              field_name: field.field_name,
              values: new Set()
            });
          }
          
          if (field.values && field.values[0]) {
            const fieldData = fieldsMap.get(field.field_name);
            fieldData.values.add(field.values[0].value);
          }
        });
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ —Ñ–æ—Ä–º–∞—Ç
    const customFields = {};
    fieldsMap.forEach((fieldData, fieldName) => {
      customFields[fieldName] = {
        field_id: fieldData.field_id,
        values: Array.from(fieldData.values)
      };
    });
    
    console.log('‚úÖ –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    res.json({
      success: true,
      data: {
        pipelines: pipelines.map(pipeline => ({
          id: pipeline.id,
          name: pipeline.name,
          statuses: pipeline._embedded?.statuses?.map(status => ({
            id: status.id,
            name: status.name
          })) || []
        })),
        customFields,
        totalDeals: deals.length,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
app.post('/export/custom', async (req, res) => {
  console.log('üéØ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...');
  
  const { filters } = req.body;
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', JSON.stringify(filters, null, 2));
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
    filters: filters
  });
  
  try {
    const axios = require('axios');
    
    if (!AMO_TOKEN) {
      console.error('‚ùå AMO_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    console.log('üîç –ü–†–ò–ú–ï–ù–Ø–ï–ú–´–ï –§–ò–õ–¨–¢–†–´:');
    if (filters.customFields) {
      Object.entries(filters.customFields).forEach(([fieldName, values]) => {
        if (values && values.length > 0) {
          console.log(`   üìç ${fieldName}: ${values.join(', ')}`);
        }
      });
    }
    if (filters.pipelines && filters.pipelines.length > 0) {
      console.log(`   üîÄ –í–æ—Ä–æ–Ω–∫–∏: ${filters.pipelines.join(', ')}`);
    }
    if (filters.statuses && filters.statuses.length > 0) {
      console.log(`   üìä –≠—Ç–∞–ø—ã: ${filters.statuses.join(', ')}`);
    }
    
    let totalProcessed = 0;
    let matchedDeals = 0;
    let page = 1;
    
    while (page <= 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
      
      const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
        headers: { 'Authorization': `Bearer ${AMO_TOKEN}` },
        params: {
          'with': 'custom_fields_values,contacts',
          'limit': 250,
          'page': page
        }
      });
      
      const deals = response.data._embedded?.leads || [];
      if (deals.length === 0) {
        console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
        break;
      }
      
      totalProcessed += deals.length;
      let pageMatched = 0;
      
      for (const deal of deals) {
        let dealMatches = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø–æ–ª—è–º
        if (filters.customFields && deal.custom_fields_values) {
          for (const [fieldName, expectedValues] of Object.entries(filters.customFields)) {
            if (!expectedValues || expectedValues.length === 0) continue;
            
            const field = deal.custom_fields_values.find(f => f.field_name === fieldName);
            if (!field || !field.values || !field.values[0]) {
              dealMatches = false;
              break;
            }
            
            const dealValue = field.values[0].value;
            if (!expectedValues.includes(dealValue)) {
              dealMatches = false;
              break;
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
        if (dealMatches && filters.pipelines && filters.pipelines.length > 0) {
          if (!filters.pipelines.includes(deal.pipeline_id.toString())) {
            dealMatches = false;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —ç—Ç–∞–ø–∞–º
        if (dealMatches && filters.statuses && filters.statuses.length > 0) {
          if (!filters.statuses.includes(deal.status_id.toString())) {
            dealMatches = false;
          }
        }
        
        if (dealMatches) {
          pageMatched++;
          matchedDeals++;
          
          // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
          console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù–ê: ${deal.name} (ID: ${deal.id})`);
          console.log(`      üí∞ –ë—é–¥–∂–µ—Ç: ${deal.price || 0} ‚ÇΩ`);
          console.log(`      üìÖ –°–æ–∑–¥–∞–Ω–æ: ${new Date(deal.created_at * 1000).toLocaleDateString('ru-RU')}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
          if (deal.custom_fields_values) {
            deal.custom_fields_values.forEach(field => {
              if (filters.customFields && filters.customFields[field.field_name]) {
                console.log(`      üìç ${field.field_name}: ${field.values?.[0]?.value || 'N/A'}`);
              }
            });
          }
          console.log('');
        }
      }
      
      console.log(`   üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –≤—Å–µ–≥–æ=${deals.length}, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö=${pageMatched}, –∏—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ=${matchedDeals}`);
      page++;
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –≠–ö–°–ü–û–†–¢–ê:');
    console.log(`   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalProcessed}`);
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: ${matchedDeals}`);
    console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${Math.round((matchedDeals/totalProcessed)*100)}%`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
  }
});

// –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/filters', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'filters.html'));
});

// Health check
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
  console.log(`üéØ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}/filters –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
});

module.exports = app;
