const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const { COLUMN_STRUCTURE } = require('./column-structure');

class GoogleSheetsAPI {
  constructor(sheetId, credentials) {
    this.sheetId = sheetId;
    this.credentials = credentials;
    this.doc = null;
    this.sheet = null;
  }

  async initialize() {
    try {
      const serviceAccountAuth = new JWT({
        email: this.credentials.client_email,
        key: this.credentials.private_key,
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });

      this.doc = new GoogleSpreadsheet(this.sheetId, serviceAccountAuth);
      await this.doc.loadInfo();
      
      console.log(`üìä –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ: ${this.doc.title}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
      if (this.doc.sheetCount > 0) {
        this.sheet = this.doc.sheetsByIndex[0];
      } else {
        this.sheet = await this.doc.addSheet({ 
          title: '–°–¥–µ–ª–∫–∏ amoCRM',
          headerValues: COLUMN_STRUCTURE
        });
        console.log('üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await this.ensureHeaders();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', error.message);
      throw error;
    }
  }

  async ensureHeaders() {
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.sheet.columnCount < COLUMN_STRUCTURE.length) {
        console.log(`üìè –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ –¥–æ ${COLUMN_STRUCTURE.length} –∫–æ–ª–æ–Ω–æ–∫...`);
        await this.sheet.resize({
          rowCount: Math.max(this.sheet.rowCount, 1000),
          columnCount: COLUMN_STRUCTURE.length
        });
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
      try {
        await this.sheet.loadHeaderRow();
      } catch (error) {
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
        console.log('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
        await this.sheet.setHeaderRow(COLUMN_STRUCTURE);
        await this.sheet.loadHeaderRow();
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        return;
      }
      
      // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
      if (this.sheet.headerValues.length === 0) {
        console.log('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—É—Å—Ç—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
        await this.sheet.setHeaderRow(COLUMN_STRUCTURE);
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      } else if (!this.arraysEqual(this.sheet.headerValues, COLUMN_STRUCTURE)) {
        console.log('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç—Ä–µ–±—É–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        await this.sheet.clear();
        await this.sheet.setHeaderRow(COLUMN_STRUCTURE);
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error.message);
      throw error;
    }
  }

  arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }

  async findDealRow(dealId) {
    try {
      await this.sheet.loadCells('D:D'); // –ö–æ–ª–æ–Ω–∫–∞ ID (4-—è –∫–æ–ª–æ–Ω–∫–∞)
      
      for (let i = 1; i < this.sheet.rowCount; i++) {
        const cell = this.sheet.getCell(i, 3); // 3 = –∫–æ–ª–æ–Ω–∫–∞ D (0-indexed)
        if (cell.value && cell.value.toString() === dealId.toString()) {
          return i + 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-indexed)
        }
      }
      
      return null; // –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏:', error.message);
      return null;
    }
  }

  async addOrUpdateDeal(dealData) {
    try {
      const dealId = dealData[3]; // ID —Å–¥–µ–ª–∫–∏ –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ
      const existingRow = await this.findDealRow(dealId);
      
      if (existingRow) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É ${dealId} –≤ —Å—Ç—Ä–æ–∫–µ ${existingRow}`);
        await this.updateRow(existingRow, dealData);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É ${dealId}`);
        await this.addRow(dealData);
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error.message);
      return false;
    }
  }

  async addRow(data) {
    try {
      const rowData = {};
      COLUMN_STRUCTURE.forEach((header, index) => {
        rowData[header] = data[index] || '';
      });
      
      await this.sheet.addRow(rowData);
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', error.message);
      throw error;
    }
  }

  async updateRow(rowNumber, data) {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      const range = `A${rowNumber}:${this.getColumnLetter(COLUMN_STRUCTURE.length)}${rowNumber}`;
      await this.sheet.loadCells(range);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
      for (let i = 0; i < data.length && i < COLUMN_STRUCTURE.length; i++) {
        const cell = this.sheet.getCell(rowNumber - 1, i);
        cell.value = data[i] || '';
      }
      
      await this.sheet.saveUpdatedCells();
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:', error.message);
      throw error;
    }
  }

  getColumnLetter(columnNumber) {
    let result = '';
    while (columnNumber > 0) {
      columnNumber--;
      result = String.fromCharCode(65 + (columnNumber % 26)) + result;
      columnNumber = Math.floor(columnNumber / 26);
    }
    return result;
  }

  async getAllDealIds() {
    try {
      await this.sheet.loadCells('D:D'); // –ö–æ–ª–æ–Ω–∫–∞ ID
      const dealIds = [];
      
      for (let i = 1; i < this.sheet.rowCount; i++) {
        const cell = this.sheet.getCell(i, 3);
        if (cell.value) {
          dealIds.push(cell.value.toString());
        }
      }
      
      return dealIds;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–¥–µ–ª–æ–∫:', error.message);
      return [];
    }
  }

  async clearAllData() {
    try {
      await this.sheet.clear();
      await this.sheet.setHeaderRow(COLUMN_STRUCTURE);
      console.log('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }
}

module.exports = GoogleSheetsAPI;
