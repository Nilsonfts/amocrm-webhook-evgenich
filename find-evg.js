console.log('üîç –ü–æ–∏—Å–∫ "–ï–í–ì" –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö');

require('dotenv').config();
const axios = require('axios');

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

async function findEvg() {
    try {
        console.log('üì° –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏...');
        
        let page = 1;
        let totalProcessed = 0;
        let foundEvg = [];
        
        while (page <= 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
            
            const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
                headers: {
                    'Authorization': `Bearer ${AMO_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                params: {
                    'with': 'custom_fields_values',
                    'limit': 250,
                    'page': page
                }
            });
            
            const deals = response.data._embedded?.leads || [];
            if (deals.length === 0) break;
            
            totalProcessed += deals.length;
            
            for (const deal of deals) {
                let hasEvg = false;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                if (deal.name && deal.name.toLowerCase().includes('–µ–≤–≥')) {
                    hasEvg = true;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
                if (deal.custom_fields_values) {
                    for (const field of deal.custom_fields_values) {
                        if (field.values && field.values[0]) {
                            const value = field.values[0].value;
                            if (typeof value === 'string' && value.toLowerCase().includes('–µ–≤–≥')) {
                                hasEvg = true;
                                foundEvg.push({
                                    dealId: deal.id,
                                    dealName: deal.name,
                                    fieldName: field.field_name,
                                    fieldValue: value
                                });
                            }
                        }
                    }
                }
                
                if (hasEvg && foundEvg.length < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    console.log(`   ‚≠ê –ù–ê–ô–î–ï–ù–û –ï–í–ì –≤ —Å–¥–µ–ª–∫–µ: ${deal.name} (ID: ${deal.id})`);
                }
            }
            
            page++;
            
            if (foundEvg.length >= 10) {
                console.log('   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è');
                break;
            }
        }
        
        console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–¥–µ–ª–æ–∫: ${totalProcessed}`);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ —Å "–ï–í–ì": ${foundEvg.length}`);
        
        if (foundEvg.length > 0) {
            console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å "–ï–í–ì":');
            foundEvg.forEach((item, index) => {
                console.log(`   ${index + 1}. –°–¥–µ–ª–∫–∞: ${item.dealName} (ID: ${item.dealId})`);
                console.log(`      –ü–æ–ª–µ: ${item.fieldName}`);
                console.log(`      –ó–Ω–∞—á–µ–Ω–∏–µ: ${item.fieldValue}`);
                console.log('');
            });
        } else {
            console.log('\n‚ùå –°–¥–µ–ª–∫–∏ —Å "–ï–í–ì" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

findEvg();
