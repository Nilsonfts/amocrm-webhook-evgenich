console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º AmoCRM API');

require('dotenv').config();

const AMO_DOMAIN = process.env.AMO_DOMAIN;
const AMO_TOKEN = process.env.AMO_TOKEN;

console.log(`–î–æ–º–µ–Ω: ${AMO_DOMAIN}`);
console.log(`–¢–æ–∫–µ–Ω: ${AMO_TOKEN ? AMO_TOKEN.substring(0, 10) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

const axios = require('axios');

async function test() {
    try {
        const url = `https://${AMO_DOMAIN}/api/v4/leads?limit=1`;
        console.log(`–ó–∞–ø—Ä–æ—Å –∫: ${url}`);
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${AMO_TOKEN}`,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!');
        console.log(`–°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: ${response.data._embedded?.leads?.length || 0}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:');
        if (error.response) {
            console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
            console.error(`–î–∞–Ω–Ω—ã–µ:`, error.response.data);
        } else if (error.request) {
            console.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        } else {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
        }
    }
}

test();
