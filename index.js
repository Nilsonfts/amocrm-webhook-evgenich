const express = require('express');
const bodyParser = require('body-parser');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
const AmoCRMAPI = require('./amocrm-api');
const GoogleSheetsAPI = require('./google-sheets-api');
const DataSynchronizer = require('./data-synchronizer');
const { COLUMN_STRUCTURE } = require('./column-structure');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const AMO_DOMAIN = process.env.AMO_DOMAIN || 'nebar.amocrm.ru';
const AMO_CLIENT_ID = process.env.AMO_CLIENT_ID;
const AMO_CLIENT_SECRET = process.env.AMO_CLIENT_SECRET;
const AMO_REDIRECT_URI = process.env.AMO_REDIRECT_URI || 'https://spb.evgenich.bar';
const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID || '1tD89CZMI8KqaHBx0gmGsHpc9eKYvpuk3OnCOpDYMDdE';
const GOOGLE_SHEET_GID = parseInt(process.env.GOOGLE_SHEET_GID || '0');

console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ amoCRM ‚Üí Google Sheets:');
console.log(`   AMO_DOMAIN: ${AMO_DOMAIN}`);
console.log(`   GOOGLE_SHEET_ID: ${GOOGLE_SHEET_ID}`);
console.log(`   AMO_CLIENT_ID: ${AMO_CLIENT_ID ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`   AMO_CLIENT_SECRET: ${AMO_CLIENT_SECRET ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(COLUMN_STRUCTURE).length} –∫–æ–ª–æ–Ω–æ–∫`);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const statistics = {
  webhooksReceived: 0,
  dealsProcessed: 0,
  syncCompleted: 0,
  lastWebhook: null,
  lastSync: null,
  lastFullSync: null,
  startTime: new Date(),
  errors: 0
};

// Google Credentials
let creds = null;
try {
  if (process.env.GOOGLE_CREDENTIALS) {
    const rawCredentials = process.env.GOOGLE_CREDENTIALS;
    creds = JSON.parse(rawCredentials);
    console.log('‚úÖ Google Credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } else if (process.env.GOOGLE_SERVICE_ACCOUNT) {
    creds = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
    console.log('‚úÖ Google Service Account —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
  } else {
    creds = require('./google-credentials.json');
    console.log('‚úÖ Google Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  Google Credentials –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤):', error.message);
  creds = null;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
let amoCRM;
let googleSheets;
let synchronizer;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function initializeServices() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...');

    if (!creds) {
      throw new Error('Google credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    if (!AMO_CLIENT_ID || !AMO_CLIENT_SECRET) {
      throw new Error('AmoCRM credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AmoCRM API
    amoCRM = new AmoCRMAPI(AMO_DOMAIN, AMO_CLIENT_ID, AMO_CLIENT_SECRET, AMO_REDIRECT_URI);
    amoCRM.setTokens(process.env.AMO_TOKEN, process.env.AMO_REFRESH_TOKEN);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
    googleSheets = new GoogleSheetsAPI(GOOGLE_SHEET_ID, creds);
    await googleSheets.initialize();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
    synchronizer = new DataSynchronizer(amoCRM, googleSheets);
    await synchronizer.initialize();

    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
app.use(bodyParser.json());

// API –º–∞—Ä—à—Ä—É—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç amoCRM
app.post('/webhook', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç amoCRM');
  
  // –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º 200 OK —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã amoCRM –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª webhook
  res.status(200).send('OK');
  
  try {
    statistics.webhooksReceived++;
    statistics.lastWebhook = new Date();

    const data = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!synchronizer) {
      console.error('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º webhook');
      statistics.errors++;
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    let selectedFields = [];
    let customFieldsMeta = [];
    try {
      const config = JSON.parse(fs.readFileSync(fieldsConfigPath, 'utf-8'));
      selectedFields = config.selectedFields || [];
      // –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ field_id –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
      const meta = await amoCRM.getFieldsMetadata();
      customFieldsMeta = meta.custom;
    } catch {}

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É webhook'–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ webhook:', JSON.stringify(data, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã webhook'–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
    let dealsToProcess = [];
    
    // –ù–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
    if (data.leads && data.leads.add) {
      console.log(`üÜï –ù–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏: ${data.leads.add.length}`);
      dealsToProcess = dealsToProcess.concat(data.leads.add);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if (data.leads && data.leads.update) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${data.leads.update.length}`);
      dealsToProcess = dealsToProcess.concat(data.leads.update);
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–æ–∫
    if (data.leads && data.leads.status) {
      console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${data.leads.status.length}`);
      dealsToProcess = dealsToProcess.concat(data.leads.status);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if (dealsToProcess.length > 0) {
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dealsToProcess.length} —Å–¥–µ–ª–æ–∫...`);
      
      for (const lead of dealsToProcess) {
        const leadId = lead.id || lead.lead_id;
        console.log(`ÔøΩ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${leadId}...`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        const filteredLead = selectedFields.length ? filterDealFields(lead, selectedFields, customFieldsMeta) : lead;
        
        try {
          await synchronizer.processDeal(leadId, filteredLead);
          console.log(`‚úÖ –°–¥–µ–ª–∫–∞ ${leadId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
          statistics.dealsProcessed++;
        } catch (dealError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ ${leadId}:`, dealError.message);
          statistics.errors++;
        }
      }
    } else {
      console.log('‚ö†Ô∏è Webhook –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

    statistics.syncCompleted++;
    statistics.lastSync = new Date();
    console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error.message);
    statistics.errors++;
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.post('/sync/full', async (req, res) => {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
  });
  
  try {
    if (!synchronizer) {
      console.error('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      statistics.errors++;
      return;
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
    const result = await synchronizer.fullSync();
    statistics.lastFullSync = new Date();
    
    console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    statistics.errors++;
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏
app.post('/sync/deal/:id', async (req, res) => {
  const dealId = req.params.id;
  console.log(`üîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ ${dealId}...`);
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    dealId: dealId,
    message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞'
  });
  
  try {
    if (!synchronizer) {
      console.error('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      statistics.errors++;
      return;
    }

    const success = await synchronizer.processDeal(dealId);
    
    if (success) {
      statistics.dealsProcessed++;
      console.log(`‚úÖ –°–¥–µ–ª–∫–∞ ${dealId} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ ${dealId}`);
      statistics.errors++;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ ${dealId}:`, error.message);
    statistics.errors++;
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–π AmoCRM
app.post('/diagnose/fields', async (req, res) => {
  console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–ª–µ–π AmoCRM...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
  });
  
  try {
    if (!synchronizer) {
      console.error('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      statistics.errors++;
      return;
    }

    const result = await synchronizer.diagnoseFields();
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–ª–µ–π:', error.message);
    statistics.errors++;
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
app.post('/sync/force', async (req, res) => {
  console.log('üí™ –ó–∞–ø—É—Å–∫ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏'
  });
  
  try {
    if (!synchronizer) {
      console.error('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      statistics.errors++;
      return;
    }

    // –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    await synchronizer.diagnoseFields();
    
    // –ó–∞—Ç–µ–º –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    const result = await synchronizer.fullSync();
    statistics.lastFullSync = new Date();
    
    console.log('üí™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    statistics.errors++;
  }
});

// –≠–ù–î–ü–û–ò–ù–¢: –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
app.get('/test/system', async (req, res) => {
  const results = {
    timestamp: new Date().toISOString(),
    tests: {
      googleCredentials: false,
      googleSheetsInit: false,
      columnStructure: false,
      amoCrmConnection: false
    },
    errors: [],
    details: {}
  };

  try {
    // –¢–µ—Å—Ç 1: Google Credentials
    if (creds && creds.client_email && creds.private_key) {
      results.tests.googleCredentials = true;
      results.details.googleEmail = creds.client_email;
    } else {
      results.errors.push('Google Credentials –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    // –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
    const columnCount = Object.keys(COLUMN_STRUCTURE).length;
    if (columnCount === 42) {
      results.tests.columnStructure = true;
      results.details.columnCount = columnCount;
    } else {
      results.errors.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: ${columnCount}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 42`);
    }

    // –¢–µ—Å—Ç 3: Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if (googleSheets && googleSheets.doc) {
      results.tests.googleSheetsInit = true;
      results.details.spreadsheetTitle = googleSheets.doc.title;
    } else {
      results.errors.push('Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –¢–µ—Å—Ç 4: AmoCRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (amoCRM && amoCRM.domain) {
      results.tests.amoCrmConnection = true;
      results.details.amoDomain = amoCRM.domain;
    } else {
      results.errors.push('AmoCRM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    results.success = results.errors.length === 0;
    results.summary = `${Object.values(results.tests).filter(t => t).length}/4 —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`;

  } catch (error) {
    results.errors.push(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    results.success = false;
  }

  res.json(results);
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
app.post('/test/add-row', async (req, res) => {
  console.log('üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ'
  });
  
  try {
    if (!googleSheets) {
      console.error('‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    const testData = [];
    const headers = Object.keys(COLUMN_STRUCTURE);
    
    console.log(`üìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ${headers.length} –∫–æ–ª–æ–Ω–∫–∞–º–∏`);
    
    headers.forEach((header, index) => {
      switch (header) {
        case 'ID':
          testData.push('TEST-12345');
          break;
        case '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏':
          testData.push('üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ - ' + new Date().toLocaleString('ru-RU'));
          break;
        case '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç':
          testData.push('–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç');
          break;
        case '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π':
          testData.push('–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä');
          break;
        case '–≠—Ç–∞–ø —Å–¥–µ–ª–∫–∏':
          testData.push('–¢–µ—Å—Ç–æ–≤—ã–π —ç—Ç–∞–ø');
          break;
        case '–ë—é–¥–∂–µ—Ç':
          testData.push('50000');
          break;
        case '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è':
          testData.push(new Date().toLocaleDateString('ru-RU'));
          break;
        case '–ö–µ–º —Å–æ–∑–¥–∞–Ω–∞':
          testData.push('–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          break;
        case '–ë–∞—Ä (deal)':
          testData.push('–†–í–ë –°–ü–ë –ì28');
          break;
        case '–î–∞—Ç–∞ –±—Ä–æ–Ω–∏':
          testData.push(new Date().toLocaleDateString('ru-RU'));
          break;
        case '–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π':
          testData.push('4');
          break;
        case '–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞':
          testData.push('19:00');
          break;
        case '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–û–ë':
          testData.push('–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
          break;
        case '–¢–∏–ø –ª–∏–¥–∞':
          testData.push('–¶–µ–ª–µ–≤–æ–π');
          break;
        case '–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∫–æ–Ω—Ç–∞–∫—Ç)':
          testData.push('+7 (999) 123-45-67');
          break;
        default:
          testData.push(`–¢–µ—Å—Ç ${index + 1}`);
          break;
      }
    });
    
    console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:', testData.slice(0, 5).join(', '), '...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
    await googleSheets.sheets.spreadsheets.values.append({
      spreadsheetId: googleSheets.spreadsheetId,
      range: 'A:AZ',
      valueInputOption: 'RAW',
      resource: {
        values: [testData]
      }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets!');
    console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–æ ${testData.length} –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:', error.message);
    console.error('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç —Å–¥–µ–ª–æ–∫ –Ω–µ –ï–í–ì –°–ü–ë
app.post('/clear-non-evg-deals', async (req, res) => {
  console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç —Å–¥–µ–ª–æ–∫ –Ω–µ –ï–í–ì –°–ü–ë...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—É—â–µ–Ω–∞'
  });
  
  try {
    if (!googleSheetsAPI) {
      console.error('‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      statistics.errors++;
      return;
    }

    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...');
    const response = await googleSheetsAPI.sheets.spreadsheets.values.get({
      spreadsheetId: googleSheetsAPI.spreadsheetId,
      range: 'A:AZ'
    });
    
    const rows = response.data.values || [];
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
    
    if (rows.length <= 1) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
      return;
    }
    
    const headers = rows[0];
    const barColumnIndex = headers.findIndex(header => 
      header && header.toLowerCase().includes('–±–∞—Ä')
    );
    
    console.log(`üìç –ö–æ–ª–æ–Ω–∫–∞ "–ë–∞—Ä (deal)" –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${barColumnIndex + 1} (${String.fromCharCode(65 + barColumnIndex)})`);
    
    if (barColumnIndex === -1) {
      console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∞ "–ë–∞—Ä (deal)" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ï–í–ì –°–ü–ë
    const filteredRows = [headers]; // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    let removedCount = 0;
    let keptCount = 0;
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const barValue = row[barColumnIndex];
      
      if (barValue && barValue.includes('–ï–í–ì –°–ü–ë')) {
        filteredRows.push(row);
        keptCount++;
        console.log(`‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}: ${barValue}`);
      } else {
        removedCount++;
        console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}: ${barValue || '–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${removedCount}`);
    console.log(`   –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${keptCount}`);
    console.log(`   –ò—Ç–æ–≥–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${filteredRows.length}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã...');
    await googleSheetsAPI.sheets.spreadsheets.values.clear({
      spreadsheetId: googleSheetsAPI.spreadsheetId,
      range: 'A:AZ'
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (filteredRows.length > 0) {
      console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      await googleSheetsAPI.sheets.spreadsheets.values.update({
        spreadsheetId: googleSheetsAPI.spreadsheetId,
        range: 'A1',
        valueInputOption: 'RAW',
        resource: {
          values: filteredRows
        }
      });
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –í —Ç–∞–±–ª–∏—Ü–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ ${keptCount} –∑–∞–ø–∏—Å–µ–π —Å "–ï–í–ì –°–ü–ë"`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    statistics.errors++;
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
app.post('/export/custom', async (req, res) => {
  console.log('üéØ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...');
  
  const { filters } = req.body;
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', JSON.stringify(filters, null, 2));
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
    filters: filters
  });
  
  try {
    const axios = require('axios');
    const AMO_TOKEN = process.env.AMO_TOKEN;
    
    if (!AMO_TOKEN) {
      console.error('‚ùå AMO_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }

    console.log('üîç –ü–†–ò–ú–ï–ù–Ø–ï–ú–´–ï –§–ò–õ–¨–¢–†–´:');
    if (filters.customFields) {
      Object.entries(filters.customFields).forEach(([fieldName, values]) => {
        if (values && values.length > 0) {
          console.log(`   üìç ${fieldName}: ${values.join(', ')}`);
        }
      });
    }
    if (filters.pipelines && filters.pipelines.length > 0) {
      console.log(`   üîÄ –í–æ—Ä–æ–Ω–∫–∏: ${filters.pipelines.join(', ')}`);
    }
    if (filters.statuses && filters.statuses.length > 0) {
      console.log(`   üìä –≠—Ç–∞–ø—ã: ${filters.statuses.join(', ')}`);
    }
    
    let totalProcessed = 0;
    let matchedDeals = 0;
    let page = 1;
    
    while (page <= 50) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
      
      const response = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
        headers: { 'Authorization': `Bearer ${AMO_TOKEN}` },
        params: {
          'with': 'custom_fields_values,contacts',
          'limit': 250,
          'page': page
        }
      });
      
      const deals = response.data._embedded?.leads || [];
      if (deals.length === 0) {
        console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
        break;
      }
      
      totalProcessed += deals.length;
      let pageMatched = 0;
      
      for (const deal of deals) {
        let dealMatches = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø–æ–ª—è–º
        if (filters.customFields && deal.custom_fields_values) {
          for (const [fieldName, expectedValues] of Object.entries(filters.customFields)) {
            if (!expectedValues || expectedValues.length === 0) continue;
            
            const field = deal.custom_fields_values.find(f => f.field_name === fieldName);
            if (!field || !field.values || !field.values[0]) {
              dealMatches = false;
              break;
            }
            
            const dealValue = field.values[0].value;
            if (!expectedValues.includes(dealValue)) {
              dealMatches = false;
              break;
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
        if (dealMatches && filters.pipelines && filters.pipelines.length > 0) {
          if (!filters.pipelines.includes(deal.pipeline_id.toString())) {
            dealMatches = false;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —ç—Ç–∞–ø–∞–º
        if (dealMatches && filters.statuses && filters.statuses.length > 0) {
          if (!filters.statuses.includes(deal.status_id.toString())) {
            dealMatches = false;
          }
        }
        
        if (dealMatches) {
          pageMatched++;
          matchedDeals++;
          
          // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
          console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù–ê: ${deal.name} (ID: ${deal.id})`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
          if (deal.custom_fields_values) {
            deal.custom_fields_values.forEach(field => {
              if (filters.customFields && filters.customFields[field.field_name]) {
                console.log(`      ${field.field_name}: ${field.values?.[0]?.value || 'N/A'}`);
              }
            });
          }
        }
      }
      
      console.log(`   üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –≤—Å–µ–≥–æ=${deals.length}, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö=${pageMatched}, –∏—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ=${matchedDeals}`);
      page++;
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –≠–ö–°–ü–û–†–¢–ê:');
    console.log(`   üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalProcessed}`);
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: ${matchedDeals}`);
    console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${Math.round((matchedDeals/totalProcessed)*100)}%`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
  }
});

app.post('/export/data', async (req, res) => {
  console.log('üìä –ó–ê–ü–£–°–ö –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–•: –ë–∞—Ä = "–ï–í–ì –°–ü–ë", –í—Å–µ —ç—Ç–∞–ø—ã, –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: –ï–í–ì –°–ü–ë + –í—Å–µ —ç—Ç–∞–ø—ã + –° 1 –∞–ø—Ä–µ–ª—è 2025'
  });
  
  try {
    if (!amoCRM) {
      console.error('‚ùå AmoCRM API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    console.log('üéØ –ù–ê–°–¢–†–û–ô–ö–ò –≠–ö–°–ü–û–†–¢–ê (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è):');
    console.log('   üìç –ë–∞—Ä (deal): –ï–í–ì –°–ü–ë');
    console.log('   üìç –í—Å–µ —ç—Ç–∞–ø—ã: ‚úÖ –í–°–ï –≤–∫–ª—é—á–µ–Ω—ã');
    console.log('   üìç –° 1 –∞–ø—Ä–µ–ª—è 2025 –≥–æ–¥–∞');
    
    // –î–∞—Ç–∞ —Å 1 –∞–ø—Ä–µ–ª—è 2025 –≥–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
    const startDate = new Date('2025-04-01');
    startDate.setHours(0, 0, 0, 0);
    const startTimestamp = Math.floor(startDate.getTime() / 1000);
    
    let totalProcessed = 0;
    let evgDealsFound = 0;
    let totalPages = 0;
    const maxPagesLimit = 1000; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç
    
    console.log(`üìÖ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å ${startDate.toLocaleDateString('ru-RU')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –ø–æ–ª—è "–ë–∞—Ä"
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π...');
    const fieldsResponse = await amoCRM.getCustomFields();
    
    let barFieldId = null;
    if (fieldsResponse._embedded && fieldsResponse._embedded.custom_fields) {
      const barField = fieldsResponse._embedded.custom_fields.find(field => 
        field.name && (
          field.name.includes('–ë–∞—Ä') || 
          field.name.includes('–±–∞—Ä') ||
          field.name.toLowerCase().includes('bar')
        )
      );
      
      if (barField) {
        barFieldId = barField.id;
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ "–ë–∞—Ä": ID=${barField.id}, Name="${barField.name}"`);
      }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
    for (let page = 1; page <= maxPagesLimit; page++) {
      console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}...`);
      
      try {
        const dealsResponse = await amoCRM.getAllDeals(page, 250);
        
        if (!dealsResponse._embedded || !dealsResponse._embedded.leads) {
          console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º');
          break;
        }
        
        const deals = dealsResponse._embedded.leads;
        totalPages = page;
        totalProcessed += deals.length;
        
        console.log(`   üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ${deals.length}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏
        let pageEvgCount = 0;
        
        for (const deal of deals) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–¥–µ–ª–∫–∞ "–ï–í–ì –°–ü–ë"
          let isEvgDeal = false;
          
          if (deal.custom_fields_values && barFieldId) {
            const barField = deal.custom_fields_values.find(f => f.field_id === barFieldId);
            if (barField && barField.values && barField.values[0]) {
              const value = barField.values[0].value;
              if (value && value.includes('–ï–í–ì –°–ü–ë')) {
                isEvgDeal = true;
              }
            }
          }
          
          if (isEvgDeal) {
            evgDealsFound++;
            pageEvgCount++;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
            if (synchronizer) {
              try {
                await synchronizer.processDeal(deal.id, deal);
                console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ ${deal.id}: "${deal.name}"`);
              } catch (dealError) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–¥–µ–ª–∫–∏ ${deal.id}:`, dealError.message);
              }
            }
          }
        }
        
        console.log(`   üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –≤—Å–µ–≥–æ=${deals.length}, –ï–í–ì –°–ü–ë=${pageEvgCount}, –∏—Ç–æ–≥–æ –ï–í–ì=${evgDealsFound}`);
        
        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 250 —Å–¥–µ–ª–æ–∫, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (deals.length < 250) {
          console.log('üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
          break;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (pageError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, pageError.message);
        break;
      }
    }
    
    console.log('\nüéâ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('=' .repeat(60));
    console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:`);
    console.log(`   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}`);
    console.log(`   üì¶ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${totalProcessed}`);
    console.log(`   üéØ –ù–∞–π–¥–µ–Ω–æ "–ï–í–ì –°–ü–ë" —Å–¥–µ–ª–æ–∫: ${evgDealsFound}`);
    console.log(`   üìÖ –ü–µ—Ä–∏–æ–¥: –° 1 –ê–ü–†–ï–õ–Ø 2025 (—Å ${startDate.toLocaleDateString('ru-RU')})`);
    console.log(`   ‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã: –ë–∞—Ä="–ï–í–ì –°–ü–ë" + –í—Å–µ —ç—Ç–∞–ø—ã`);
    console.log('=' .repeat(60));
    
    statistics.lastFullSync = new Date();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
    console.error('üìù –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
});

// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ï–í–ì –°–ü–ë —Å–¥–µ–ª–æ–∫
app.post('/diagnose/evg-deals', async (req, res) => {
  console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ï–í–ì –°–ü–ë —Å–¥–µ–ª–æ–∫...');
  
  // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
  res.status(200).json({
    status: 'started',
    message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ï–í–ì –°–ü–ë —Å–¥–µ–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞'
  });
  
  try {
    if (!amoCRM) {
      console.error('‚ùå AmoCRM API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è...');
    const fieldsResponse = await amoCRM.getCustomFields();
    
    let barFieldId = null;
    if (fieldsResponse._embedded && fieldsResponse._embedded.custom_fields) {
      const barField = fieldsResponse._embedded.custom_fields.find(field => 
        field.name && (
          field.name.includes('–ë–∞—Ä') || 
          field.name.includes('–±–∞—Ä') ||
          field.name.toLowerCase().includes('bar')
        )
      );
      
      if (barField) {
        barFieldId = barField.id;
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ: ID=${barField.id}, Name="${barField.name}"`);
        
        if (barField.enums) {
          console.log('üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è:');
          barField.enums.forEach(enumValue => {
            console.log(`   - ID=${enumValue.id}, Value="${enumValue.value}"`);
          });
        }
      } else {
        console.log('‚ùå –ü–æ–ª–µ "–ë–∞—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        console.log('üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:');
        fieldsResponse._embedded.custom_fields.slice(0, 10).forEach(field => {
          console.log(`   - ID=${field.id}, Name="${field.name}"`);
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–¥–µ–ª–æ–∫
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–¥–µ–ª–∫–∏...');
    let totalChecked = 0;
    let evgFound = 0;
    const maxPages = 10;
    
    for (let page = 1; page <= maxPages; page++) {
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
      
      try {
        const dealsResponse = await amoCRM.getAllDeals(page, 250);
        
        if (!dealsResponse._embedded || !dealsResponse._embedded.leads) {
          console.log('üì≠ –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç');
          break;
        }
        
        const deals = dealsResponse._embedded.leads;
        totalChecked += deals.length;
        
        let pageEvgCount = 0;
        
        for (const deal of deals) {
          if (deal.custom_fields_values) {
            // –ò—â–µ–º –ø–æ–ª–µ –ø–æ ID –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            let barField = null;
            if (barFieldId) {
              barField = deal.custom_fields_values.find(f => f.field_id === barFieldId);
            }
            
            if (!barField) {
              barField = deal.custom_fields_values.find(f => 
                f.field_name && (
                  f.field_name.includes('–ë–∞—Ä') || 
                  f.field_name.includes('–±–∞—Ä')
                )
              );
            }
            
            if (barField && barField.values && barField.values[0]) {
              const value = barField.values[0].value;
              
              if (value && value.includes('–ï–í–ì –°–ü–ë')) {
                evgFound++;
                pageEvgCount++;
                console.log(`   ‚úÖ –ï–í–ì –°–ü–ë: ${deal.id} "${deal.name}" = "${value}"`);
              }
            }
          }
        }
        
        console.log(`   üìä –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –≤—Å–µ–≥–æ=${deals.length}, –ï–í–ì –°–ü–ë=${pageEvgCount}`);
        
        if (deals.length < 250) break;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
        break;
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:`);
    console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${Math.min(maxPages, 10)}`);
    console.log(`   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalChecked}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ï–í–ì –°–ü–ë: ${evgFound}`);
    console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è: 1445 —Å–¥–µ–ª–æ–∫`);
    
    if (evgFound < 100) {
      console.log(`\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ª–æ –ï–í–ì –°–ü–ë —Å–¥–µ–ª–æ–∫`);
      console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
      console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è`);
      console.log(`   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö`);
      console.log(`   3. –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ API`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
  const uptime = Math.round((Date.now() - statistics.startTime.getTime()) / 1000);
  
  res.json({
    ...statistics,
    uptime: uptime,
    services: {
      amoCRM: !!amoCRM,
      googleSheets: !!googleSheets,
      synchronizer: !!synchronizer
    },
    columnStructure: {
      total: Object.keys(COLUMN_STRUCTURE).length,
      columns: COLUMN_STRUCTURE
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    timestamps: {
      startTime: statistics.startTime,
      lastWebhook: statistics.lastWebhook,
      lastSync: statistics.lastSync,
      lastFullSync: statistics.lastFullSync
    },
    successRate: statistics.webhooksReceived > 0 ? 
      Math.round((statistics.dealsProcessed / statistics.webhooksReceived) * 100) : 0
  });
});

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
app.get('/api/info', (req, res) => {
  const uptime = Math.round((Date.now() - statistics.startTime.getTime()) / 1000);
  
  res.json({
    name: 'AmoCRM ‚Üí Google Sheets –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞',
    version: '2.0.0',
    status: synchronizer ? 'running' : 'initializing',
    uptime: uptime,
    statistics: statistics,
    fieldConfigurator: {
      enabled: true,
      configPath: fieldsConfigPath,
      uiPath: '/src/field-configurator.html'
    },
    endpoints: {
      webhook: 'POST /webhook - –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç amoCRM',
      syncFull: 'POST /sync/full - –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫',
      syncDeal: 'POST /sync/deal/:id - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏',
      stats: 'GET /api/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã',
      info: 'GET /api/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'
    },
    structure: {
      columns: Object.keys(COLUMN_STRUCTURE).length,
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ amoCRM –≤ Google Sheets —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö'
    }
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
app.get('/api/filter-options', async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...');
    
    const axios = require('axios');
    const AMO_TOKEN = process.env.AMO_TOKEN;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ—Ä–æ–Ω–∫–∏ –∏ —ç—Ç–∞–ø—ã
    const pipelinesResponse = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads/pipelines`, {
      headers: { 'Authorization': `Bearer ${AMO_TOKEN}` }
    });
    
    const pipelines = pipelinesResponse.data._embedded?.pipelines || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const fieldsMap = new Map();
    
    for (let page = 1; page <= 3; page++) {
      const dealsResponse = await axios.get(`https://${AMO_DOMAIN}/api/v4/leads`, {
        headers: { 'Authorization': `Bearer ${AMO_TOKEN}` },
        params: { 'with': 'custom_fields_values', 'limit': 250, 'page': page }
      });
      
      const deals = dealsResponse.data._embedded?.leads || [];
      if (deals.length === 0) break;
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
      for (const deal of deals) {
        if (deal.custom_fields_values) {
          deal.custom_fields_values.forEach(field => {
            if (!fieldsMap.has(field.field_name)) {
              fieldsMap.set(field.field_name, {
                field_id: field.field_id,
                field_name: field.field_name,
                values: new Set()
              });
            }
            
            if (field.values && field.values[0]) {
              const fieldData = fieldsMap.get(field.field_name);
              fieldData.values.add(field.values[0].value);
            }
          });
        }
      }
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ${fieldsMap.size}`);
    fieldsMap.forEach((data, name) => {
      if (name.includes('–ë–∞—Ä')) {
        console.log(`üéØ –ü–æ–ª–µ "${name}": ${Array.from(data.values).join(', ')}`);
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ —Ñ–æ—Ä–º–∞—Ç
    const customFields = {};
    fieldsMap.forEach((fieldData, fieldName) => {
      customFields[fieldName] = {
        field_id: fieldData.field_id,
        values: Array.from(fieldData.values)
      };
    });
    
    console.log('‚úÖ –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    res.json({
      success: true,
      data: {
        pipelines: pipelines.map(pipeline => ({
          id: pipeline.id,
          name: pipeline.name,
          statuses: pipeline._embedded?.statuses?.map(status => ({
            id: status.id,
            name: status.name
          })) || []
        })),
        customFields,
        totalFields: fieldsMap.size,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –ü—Ä–æ—Å—Ç–æ–π ping —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/ping', (req, res) => {
  res.status(200).json({ 
    status: 'pong', 
    timestamp: new Date().toISOString() 
  });
});

// –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ–ª–µ–π
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è Railway
const getConfigPath = () => {
  // –í Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º —Ç–æ–º–µ –ø–æ –ø—É—Ç–∏ /app/config
  if (process.env.RAILWAY_SERVICE_ID && fs.existsSync('/app/config')) {
    return path.join('/app/config', 'fields.json');
  }
  // –í –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  return path.join(__dirname, 'config', 'fields.json');
};

const fieldsConfigPath = getConfigPath();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(fieldsConfigPath)) {
  const configDir = path.dirname(fieldsConfigPath);
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  fs.writeFileSync(fieldsConfigPath, JSON.stringify({ selectedFields: [] }, null, 2));
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π: ${fieldsConfigPath}`);
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—è–º
function filterDealFields(deal, selectedFields, customFieldsMeta) {
  console.log(`üîç DEBUG filterDealFields: selectedFields=`, selectedFields);
  
  // –ï—Å–ª–∏ selectedFields –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É
  if (!selectedFields || selectedFields.length === 0) {
    console.log(`üîç DEBUG: selectedFields –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É`);
    return deal;
  }
  
  const filtered = {
    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
    id: deal.id,
    name: deal.name,
    price: deal.price,
    created_at: deal.created_at,
    updated_at: deal.updated_at,
    status_id: deal.status_id,
    pipeline_id: deal.pipeline_id,
    responsible_user_id: deal.responsible_user_id
  };
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º selectedFields
  for (const field of selectedFields) {
    console.log(`üîç DEBUG processing field:`, field);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º id (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (field && typeof field === 'object' && field.id) {
      const fieldId = field.id;
      if (deal.custom_fields_values) {
        const cf = deal.custom_fields_values.find(f => f.field_id === fieldId);
        if (cf) {
          if (!filtered.custom_fields_values) filtered.custom_fields_values = [];
          filtered.custom_fields_values.push(cf);
          console.log(`‚úÖ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ ${fieldId}`);
        }
      }
      continue;
    }
    
    // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
    if (typeof field === 'string') {
      if (deal[field] !== undefined) filtered[field] = deal[field];
    }
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è (–ø–æ field_id)
    if (typeof field === 'number' || /^[0-9]+$/.test(field)) {
      if (deal.custom_fields_values) {
        const cf = deal.custom_fields_values.find(f => String(f.field_id) === String(field));
        if (cf) {
          if (!filtered.custom_fields_values) filtered.custom_fields_values = [];
          filtered.custom_fields_values.push(cf);
        }
      }
    }
  }
  
  console.log(`üîç DEBUG filtered result:`, JSON.stringify(filtered, null, 2));
  return filtered;
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.get('/api/env-check', (req, res) => {
  const envInfo = {
    hasGoogleCredentials: !!process.env.GOOGLE_CREDENTIALS,
    hasGoogleServiceAccount: !!process.env.GOOGLE_SERVICE_ACCOUNT,
    googleCredentialsLength: process.env.GOOGLE_CREDENTIALS ? process.env.GOOGLE_CREDENTIALS.length : 0,
    googleServiceAccountLength: process.env.GOOGLE_SERVICE_ACCOUNT ? process.env.GOOGLE_SERVICE_ACCOUNT.length : 0,
    hasAmoClientId: !!process.env.AMO_CLIENT_ID,
    hasAmoClientSecret: !!process.env.AMO_CLIENT_SECRET,
    hasAmoAccessToken: !!process.env.AMO_ACCESS_TOKEN,
    hasAmoRefreshToken: !!process.env.AMO_REFRESH_TOKEN,
    credsInitialized: !!creds,
    googleSheetsInitialized: !!googleSheets,
    synchronizerInitialized: !!synchronizer,
    nodeEnv: process.env.NODE_ENV,
    port: process.env.PORT
  };
  
  res.json(envInfo);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π
app.get('/config/fields', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!fs.existsSync(fieldsConfigPath)) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ column-structure.js
      res.json(COLUMN_STRUCTURE);
      return;
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = JSON.parse(fs.readFileSync(fieldsConfigPath, 'utf-8'));
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å selectedFields, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π
    if (config.selectedFields) {
      const newConfig = {};
      config.selectedFields.forEach(field => {
        newConfig[field.name] = field.columnName || field.name;
      });
      res.json(newConfig);
    } else {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      res.json(config);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π:', error.message);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    res.json(COLUMN_STRUCTURE);
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π
app.post('/config/fields', (req, res) => {
  try {
    const fieldsConfig = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏
    if (!fieldsConfig || typeof fieldsConfig !== 'object') {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª
    fs.writeFileSync(fieldsConfigPath, JSON.stringify(fieldsConfig, null, 2));
    
    console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${Object.keys(fieldsConfig).length} –ø–æ–ª–µ–π`);
    
    // –î–ª—è Railway: –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (process.env.RAILWAY_SERVICE_ID) {
      console.log('‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Railway environment');
    }

    res.status(200).json({ 
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      fieldsCount: Object.keys(fieldsConfig).length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π:', error.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª–µ–π
app.get('/field-configurator', (req, res) => {
  res.sendFile(path.join(__dirname, 'src', 'field-configurator.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
app.get('/filters', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'filters.html'));
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ü–û–°–õ–ï API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(express.static('public'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ 04:00
cron.schedule('0 4 * * *', async () => {
  console.log('‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ 04:00...');
  
  try {
    if (synchronizer) {
      const result = await synchronizer.fullSync();
      statistics.lastFullSync = new Date();
      console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processed} —Å–¥–µ–ª–æ–∫`);
    } else {
      console.log('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    statistics.errors++;
  }
}, {
  timezone: "Europe/Moscow"
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  const port = process.env.PORT || 3000;
  
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
  const initialized = await initializeServices();
  
  if (!initialized) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
  }
  
  app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(COLUMN_STRUCTURE).length} –∫–æ–ª–æ–Ω–æ–∫`);
    console.log(`‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 04:00 –ú–°–ö`);
    console.log(`üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
    console.log(`   GET  /api/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ`);
    console.log(`   GET  /api/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã`);
    console.log(`   POST /webhook - Webhook –æ—Ç amoCRM`);
    console.log(`   POST /sync/full - –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è`);
    console.log(`   POST /sync/deal/:id - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏`);
    console.log(`   GET  /config/fields - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π`); 
    console.log(`   POST /config/fields - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}`);
    console.log(`üåê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –ø–æ–ª–µ–π: http://localhost:${port}/src/field-configurator.html`);
    
    if (initialized) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö amoCRM –≤ Google Sheets');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  statistics.errors++;
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  statistics.errors++;
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();
